@attribute [Authorize(Roles = "HR")]
@page "/HR/User"

@using DataLibrary
@using DataLibrary.Models
@using merTensWebApp.Models
@using System.Collections.ObjectModel
@using Blazorise.Components
@using Microsoft.AspNetCore.Authorization


@inject IUserData _db


    <AuthorizeView Roles="IT">
        <p>You can only see this if you're in the User role.</p>
    </AuthorizeView>

    <AuthorizeView Roles="HR">
        <Authorized>
            This content is displayed only if the user is Authorized
        </Authorized>
    </AuthorizeView>

    <!--
        Modal - New User
        für Variablen bitte in den Code Abteil anschauen
    -->

    <Button Color="Color.Primary" Clicked="@(()=>ShowModal( ModalSize.Default, null, true ))">
        Neuer Mitarbeiter
    </Button>
    <Modal @ref="modalRef">
        <ModalContent Size="@modalSize" Centered="@centered">
            <ModalHeader>
                <ModalTitle>
                    <Icon Name="IconName.UserPlus" />
                    Neuer Mitarbeiter
                </ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody MaxHeight="@maxHeight">

                <Field>
                    <FieldLabel>Vorname</FieldLabel>
                    <TextEdit @bind-Text="newUser.Vorname" Autofocus="true" Placeholder="Vorname..." />
                </Field>

                <Field>
                    <FieldLabel>Nachname</FieldLabel>
                    <TextEdit @bind-Text="newUser.Nachname" Placeholder="Nachname..." />
                </Field>

                <Field>
                    <FieldLabel>Eintrittsdatum</FieldLabel>
                    <DateEdit TValue="DateTime?" @bind-Date="newUser.Eintrittsdatum" Placeholder="Eintrittsdatum wählen"></DateEdit>
                </Field>

                <!-- https://blazorise.com/docs/extensions/selectlist/ -->
                <Field>
                    <FieldLabel>Stellenbeschreibung</FieldLabel>
                    <SelectList SelectedValue="@selectedStelleValue"
                                SelectedValueChanged="@StellenChangedHandler"
                                TItem="Stellenbeschreibung"
                                TValue="string"
                                Data="@dataStellenbeschreibung"
                                TextField="@(( item) => item.MyTextField)"
                                ValueField="@(( item) => item.MyValueField.ToString())"
                                DefaultItemText="Bitte Position auswählen..."
                                DefaultItemDisabled="true">
                    </SelectList>
                </Field>

                <Field>
                    <FieldLabel>Standort</FieldLabel>
                    <SelectList SelectedValue="@selectedStandortValue"
                                SelectedValueChanged="@StandortChangedHandler"
                                TItem="Standorte"
                                TValue="string"
                                Data="@dataStandorte"
                                TextField="@(( item) => item.StandorteTextField)"
                                ValueField="@(( item) => item.StandorteValueField.ToString())"
                                DefaultItemText="Bitte Standort auswählen..."
                                DefaultItemDisabled="true">
                    </SelectList>
                </Field>

                <Field>
                    <FieldLabel>Bemerkung</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                        <MemoEdit Rows="5" @bind-Text="newUser.Bemerkung"></MemoEdit>
                    </FieldBody>
                </Field>

                <!--Boolean Switches (NB, Handy, etc | Methode SwitchVars und Variablen anpassen, wenn hier was geändert wird-->
                <Field>
                    <Switch TValue="bool" @bind-Checked="nbChecked">Notebook</Switch>
                    <Switch TValue="bool" @bind-Checked="handyChecked">Handy</Switch>
                    <Switch TValue="bool" @bind-Checked="tabletChecked">Tablet</Switch>
                    <Switch TValue="bool" @bind-Checked="monChecked">Monitor</Switch>
                    <Switch TValue="bool" @bind-Checked="printerChecked">Drucker</Switch>
                    <Switch TValue="bool" @bind-Checked="homeChecked">Homeoffice</Switch>
                </Field>

            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Abbrechen</Button>
                <Button Color="Color.Primary" Clicked="@CreateUser">Übermitteln</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <!--TABELLE-->

    <h4>Current History</h4>
    @if (user == null)
    {
        <p><em>Loading....</em></p>
    }
    else
    {
        <Table Hoverable="true">
            <TableHeader ThemeContrast="ThemeContrast.Dark">
                <TableRow>
                    <TableHeaderCell>ID</TableHeaderCell>
                    <TableHeaderCell>Vorname</TableHeaderCell>
                    <TableHeaderCell>Nachname</TableHeaderCell>
                    <TableHeaderCell>Stellenbeschreibung</TableHeaderCell>
                    <TableHeaderCell>Eintrittsdatum</TableHeaderCell>
                    <TableHeaderCell>Standort</TableHeaderCell>
                    <TableHeaderCell>Bemerkung</TableHeaderCell>
                    <TableHeaderCell>AngelegtAm</TableHeaderCell>
                    <TableHeaderCell>AngelegtVon</TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (var u in user)
                {
                    <TableRow @key="@u.ID">
                        <TableRowHeader>@u.ID</TableRowHeader>
                        <TableRowCell>@u.Vorname</TableRowCell>
                        <TableRowCell>@u.Nachname</TableRowCell>
                        <TableRowCell>@u.Stellenbeschreibung</TableRowCell>
                        <TableRowCell>@u.Eintrittsdatum</TableRowCell>
                        <TableRowCell>@u.Standort</TableRowCell>
                        <TableRowCell>@u.Bemerkung</TableRowCell>
                        <TableRowCell>@u.AngelegtAm</TableRowCell>
                        <TableRowCell>@u.AngelegtVon</TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>

    }


    @code {
        [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }
        [Inject]
        public NavigationManager NavigationManager { get; set; }


        string LoggedInUser = Environment.UserName;
        string selectedStelleValue { get; set; } = "Bitte Position auswählen...";
        string selectedStandortValue { get; set; } = "Bitte Standort auswählen...";


        //Liste für Stellenbeschreibung
        static string[] strStellenbeschreibung = { "KAM", "IT", "LAGER", "AZUBI" };
        IEnumerable<Stellenbeschreibung> dataStellenbeschreibung = Enumerable.Range(1, strStellenbeschreibung.Length).Select(x => new Stellenbeschreibung { MyTextField = strStellenbeschreibung[x - 1], MyValueField = x });

        private void StellenbeschreibungToString()
        {
            switch (selectedStelleValue)
            {
                case "1":
                    newUser.Stellenbeschreibung = "KAM";
                    break;
                case "2":
                    newUser.Stellenbeschreibung = "IT";
                    break;
            }
        }

        void StellenChangedHandler(string newValue)
        {
            selectedStelleValue = newValue;
            StateHasChanged();
        }

        //Liste für Standorte
        static string[] strStandorte = { "Willich", "Berlin", "Wiesbaden" };
        IEnumerable<Standorte> dataStandorte = Enumerable.Range(1, strStandorte.Length).Select(y => new Standorte { StandorteTextField = strStandorte[y - 1], StandorteValueField = y });

        private void StandortToString()
        {
            switch (selectedStandortValue)
            {
                case "1":
                    newUser.Standort = "Willich";
                    break;
                case "2":
                    newUser.Standort = "Berlin";
                    break;
            }
        }

        void StandortChangedHandler(string newValue)
        {
            selectedStandortValue = newValue;
            StateHasChanged();
        }


        //Liste für User
        private List<UserModel> user;
        private DisplayUserModel newUser = new DisplayUserModel();

        //Switch Vars
        #region SwitchVariablen - NB, Handy, etc
        private bool nbChecked;
        private bool handyChecked;
        private bool tabletChecked;
        private bool monChecked;
        private bool printerChecked;
        private bool homeChecked;
        #endregion

        //Modal Vars
        #region Modal Variablen
        private Modal modalRef;
        private bool centered = false;
        private ModalSize modalSize = ModalSize.Default;
        private int? maxHeight = null;
        #endregion

        private void switchCheck()
        {
            if (nbChecked == true) { newUser.Notebook = "1"; }
            else { newUser.Notebook = "0"; }

            if (handyChecked == true) { newUser.Handy = "1"; }
            else { newUser.Handy = "0"; }

            if (tabletChecked == true) { newUser.Tablet = "1"; }
            else { newUser.Tablet = "0"; }

            if (monChecked == true) { newUser.Monitor = "1"; }
            else { newUser.Monitor = "0"; }

            if (printerChecked == true) { newUser.Drucker = "1"; }
            else { newUser.Drucker = "0"; }

            if (homeChecked == true) { newUser.Homeoffice = "1"; }
            else { newUser.Homeoffice = "0"; }
        }

        private void ShowModal(ModalSize modalSize, int? maxHeight = null, bool centered = false, bool nbChecked = false, bool handyChecked = false, bool tabletChecked = false, bool monChecked = false, bool printerChecked = false, bool homeChecked = false, string selectedStelleValue = "Bitte Position auswählen...")
        {
            this.centered = centered;
            this.modalSize = modalSize;
            this.maxHeight = maxHeight;
            this.nbChecked = false;
            this.handyChecked = false;
            this.tabletChecked = false;
            this.monChecked = false;
            this.printerChecked = false;
            this.homeChecked = false;
            this.selectedStelleValue = "Bitte Position auswählen...";
            this.selectedStandortValue = "Bitte Standort auswählen...";

            modalRef.Show();
        }

        private void HideModal()
        {
            this.nbChecked = false;
            this.handyChecked = false;
            this.tabletChecked = false;
            this.monChecked = false;
            this.printerChecked = false;
            this.homeChecked = false;
            this.selectedStelleValue = "Bitte Position auswählen...";
            this.selectedStandortValue = "Bitte Standort auswählen...";
            modalRef.Hide();
            OnInitializedAsync();
        }

        protected override async Task OnInitializedAsync()
        {
            var authenticationState = await authenticationStateTask;
            if (!authenticationState.User.IsInRole("IT"))
            {
                NavigationManager.NavigateTo($"/");
            }
            else
            {
                user = await _db.GetUsers();
            }          
        }

        private async Task CreateUser()
        {
            await OnInitializedAsync();
            StandortToString();
            StellenbeschreibungToString();
            switchCheck();
            UserModel u = new UserModel
            {
                ID = newUser.ID,
                Vorname = newUser.Vorname,
                Nachname = newUser.Nachname,
                Username = newUser.Vorname.Substring(0, 1).ToLower() + "." + newUser.Nachname.ToLower(),
                Email = newUser.Vorname.Substring(0, 1).ToLower() + "." + newUser.Nachname.ToLower() + "@mertens.ag",
                Stellenbeschreibung = newUser.Stellenbeschreibung,
                Eintrittsdatum = newUser.Eintrittsdatum,
                INT_TODO = newUser.INT_TODO,
                Notebook = newUser.Notebook,
                Handy = newUser.Handy,
                Tablet = newUser.Tablet,
                Monitor = newUser.Monitor,
                Drucker = newUser.Drucker,
                Homeoffice = newUser.Homeoffice,
                Bemerkung = newUser.Bemerkung,
                Standort = newUser.Standort
            };

            await _db.NewUser(u);

            user.Add(u);

            newUser = new DisplayUserModel();
            HideModal();
        }
    }
